using NUnit.Framework;
using MedidorTCP.Entities.Extensions;

namespace MedidorTCPTests {
    [TestFixture]
    public class ExtensionsTests {

        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x5C, 0x63, 0xC6, 0x3E }, ExpectedResult = 0x3E)]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x59, 0x7B, 0x40, 0xA5 }, ExpectedResult = 0xA5)]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x53, 0x57, 0x09, 0xCA }, ExpectedResult = 0xCA)]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x60, 0xCE, 0x9E, 0xF7 }, ExpectedResult = 0xF7)]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x4C, 0xF4, 0x0F, 0x70 }, ExpectedResult = 0x70)]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x40, 0x09, 0x6E, 0xE0 }, ExpectedResult = 0xE0)]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x3D, 0x68, 0x6D, 0xFF }, ExpectedResult = 0xFF)]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x38, 0xAB, 0xFA, 0xAE }, ExpectedResult = 0xAE)]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x34, 0xD1, 0x0D, 0x2F }, ExpectedResult = 0x2F)]
        
        public byte ConferirChecksum_DeveRetornarChecksumCalculadoCorretamente(byte[] buffer) {
            return buffer.ConferirChecksum();
        }

        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x5C, 0x63, 0xC6, 0x3E })]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x59, 0x7B, 0x40, 0xA5 })]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x53, 0x57, 0x09, 0xCA })]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x60, 0xCE, 0x9E, 0xF7 })]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x4C, 0xF4, 0x0F, 0x70 })]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x40, 0x09, 0x6E, 0xE0 })]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x3D, 0x68, 0x6D, 0xFF })]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x38, 0xAB, 0xFA, 0xAE })]
        [TestCase(new byte[] { 0x7D, 0x04, 0x85, 0x46, 0x34, 0xD1, 0x0D, 0x2F })]
        
        public void ChecksumCalculado_DeveSerIgualAoChecksumRecebido(byte[] buffer) {
            byte checksumCalculado = buffer.ConferirChecksum();
            byte checksumRecebido = buffer[buffer.Length - 1]; // Último byte
            Assert.AreEqual(checksumRecebido, checksumCalculado);
        }
    }
}
